// Code generated by ent, DO NOT EDIT.

package store

import (
	"main/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldID, id))
}

// IsUsed applies equality check predicate on the "is_used" field. It's identical to IsUsedEQ.
func IsUsed(v bool) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldIsUsed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldUpdatedAt, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreID, v))
}

// AppAccessKey applies equality check predicate on the "app_access_key" field. It's identical to AppAccessKeyEQ.
func AppAccessKey(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldAppAccessKey, v))
}

// IsUsedEQ applies the EQ predicate on the "is_used" field.
func IsUsedEQ(v bool) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldIsUsed, v))
}

// IsUsedNEQ applies the NEQ predicate on the "is_used" field.
func IsUsedNEQ(v bool) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldIsUsed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldUpdatedAt, v))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDGT applies the GT predicate on the "store_id" field.
func StoreIDGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldStoreID, v))
}

// StoreIDGTE applies the GTE predicate on the "store_id" field.
func StoreIDGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldStoreID, v))
}

// StoreIDLT applies the LT predicate on the "store_id" field.
func StoreIDLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldStoreID, v))
}

// StoreIDLTE applies the LTE predicate on the "store_id" field.
func StoreIDLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldStoreID, v))
}

// StoreIDContains applies the Contains predicate on the "store_id" field.
func StoreIDContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldStoreID, v))
}

// StoreIDHasPrefix applies the HasPrefix predicate on the "store_id" field.
func StoreIDHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldStoreID, v))
}

// StoreIDHasSuffix applies the HasSuffix predicate on the "store_id" field.
func StoreIDHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldStoreID, v))
}

// StoreIDEqualFold applies the EqualFold predicate on the "store_id" field.
func StoreIDEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldStoreID, v))
}

// StoreIDContainsFold applies the ContainsFold predicate on the "store_id" field.
func StoreIDContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldStoreID, v))
}

// AppAccessKeyEQ applies the EQ predicate on the "app_access_key" field.
func AppAccessKeyEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldAppAccessKey, v))
}

// AppAccessKeyNEQ applies the NEQ predicate on the "app_access_key" field.
func AppAccessKeyNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldAppAccessKey, v))
}

// AppAccessKeyIn applies the In predicate on the "app_access_key" field.
func AppAccessKeyIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldAppAccessKey, vs...))
}

// AppAccessKeyNotIn applies the NotIn predicate on the "app_access_key" field.
func AppAccessKeyNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldAppAccessKey, vs...))
}

// AppAccessKeyGT applies the GT predicate on the "app_access_key" field.
func AppAccessKeyGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldAppAccessKey, v))
}

// AppAccessKeyGTE applies the GTE predicate on the "app_access_key" field.
func AppAccessKeyGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldAppAccessKey, v))
}

// AppAccessKeyLT applies the LT predicate on the "app_access_key" field.
func AppAccessKeyLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldAppAccessKey, v))
}

// AppAccessKeyLTE applies the LTE predicate on the "app_access_key" field.
func AppAccessKeyLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldAppAccessKey, v))
}

// AppAccessKeyContains applies the Contains predicate on the "app_access_key" field.
func AppAccessKeyContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldAppAccessKey, v))
}

// AppAccessKeyHasPrefix applies the HasPrefix predicate on the "app_access_key" field.
func AppAccessKeyHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldAppAccessKey, v))
}

// AppAccessKeyHasSuffix applies the HasSuffix predicate on the "app_access_key" field.
func AppAccessKeyHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldAppAccessKey, v))
}

// AppAccessKeyEqualFold applies the EqualFold predicate on the "app_access_key" field.
func AppAccessKeyEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldAppAccessKey, v))
}

// AppAccessKeyContainsFold applies the ContainsFold predicate on the "app_access_key" field.
func AppAccessKeyContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldAppAccessKey, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		p(s.Not())
	})
}
